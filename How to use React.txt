1. npm init (it is used to intialize the package.json) which is used to keep track all of the dependencies.
	
2.  So we now need develop dependecies and normal dependicies to run

	npm install react react-dom --save

  It downlownds react and react-dom depencies	 

3. So now need all the babel packages need

	npm install babel-core  babel-loader babel-preset-es2015 babel-preset-react --save-dev

	babel-preset-react help to change react code or jSx code in javascript
	babel-preset-es2015 converts es 2015 in normal javascript
	--save-dev is used to save as developer dependecies

	
4. So now we need webpack and webpack server

	npm install webpack webpack-dev-server --save-dev


5. Now we create our webpack config file which is going to control how babel converts all out jsx and es2015 into vanilla javascript and where to put the output Javascript.

	Create new file > webpack.config.js

	So webpack.config.js combine all the files and make as one file for require in index.js

	webpack can be run with

		npm start

6. Now we are creating react component

	SO first inside in index.js we require react

		var React = require('react');
		var ReactDOM = require('react-dom');

	Now we are creating components there are two ways to create a compoenent we can use es6 or we can use react way of doing such as jsx

	//Create Component
	class TodoComponent extends React.Component {

	This how we create compoenent by creating react class and inside the object  what we can do inside this compoenent it contains variety of different methods etc that we can use  only on required method is render method. this render method is function which returns some HTML code  so this html code is going to be inserted into our HTML documen when we  tell react to insert this compoenent.

	render() {
		//return a code

		return(
			<h1>Dmanavir</h1>
		);
	}

	this is JSx action because would not normally write  html code in javascript. So jsx allow us to this for example: <h1> helele</h1>

	So to print this index file we need placeholder so we creatind fiv inside index.html.

	<div id="todo-wrapper"></div>

	//put compoenent into html page
	ReactDOM.render(<TodoCompoenent />,document.getElementById('todo-wrapper'));

	ReactDom render takes the which component should be render and after comma where we put that.


7. So if we want to add more html elements inside return in render function then it gives error

	render() {
		//return a code

		return(
			<h1>Dmanavir</h1>
			<p>Damnavir</p>
		);
	}	

	So erro says we have two top-level tags within the return statement now react doesnot like that  it wants you to put everything in return  statement in one parent tag	

	render() {
		//return a code

		return(
			<div>
	 			<h1>Dmanavir</h1>
				<p>Damnavir</p>
			</div>
		);
	}	

	We can add mutilply elements inside the one single parent


	In developers tool we can see our react dom tab we can download this by downloading React Developer Tools extension

8. We can now see the props.

	Props is a way for us to pass data into our components which we want to display on the webpage to the user because  normally when we are writing an application we are not just going to create compoenent which is just static HTML because what would be the point we want to create component which may take some data and output the dynamic compoenents

	Props is stands for properties much like html properties much like you find on HTML tags such as the href prop or the source property so we an create our custom property on <TodoCompoenent /> tag so we are passing some data  so that we can  then use it  within this component

	so simply we create property name and equal to something that we are going to pass in this compoenent now this is just to be equal to string.

	ReactDOM.render(<TodoCompoenent mssg="i like cheese"/>,document.getElementById('todo-wrapper'));
	

	So we passing string to the string and we can reference in todo compoenent.

	So to output in any kind of dynamic data or variable we use curly braces like thar we output inside the return 


	render() {
		//return a code

		return(
			<div>
	 			<h1>Dmanavir</h1>
				<p>Damnavir</p>
				<p>{this.props.mssg}</p>
			</div>
		);
	}	
	
	So first we use the this statement to reference this component or todo component  so this component has a property on it call props so it grabs all the properties availabel in this. so now we only have mssg.


9. Now we can see the state

	In react we  have two main ways we can work with data in react first by using props and also by using state.

	We do not pass state into the component we define the state within the component itself and then we can access the state properties in that compoenent.

	So first all we define an initial state of component when the application starts what is  the  state of it  what data does it have  within it and we do that by using a method within this component.
	SO first we created we only requires one method that is  render   method and so we are creating another one now called  getinitialState which is going to initilize the data of the state of this component.	

	getinitialstate is function is returning the object within this object is going to be all of our data our  state for this compoenent 

	class TodoComponent extends React.Component {
	   getInitialState: function() {
		return {
			todos: ['wash up','eat some cheese','take a nap']			
		}
	   },
	   render() {
		//return a code

		return(
		);
            }//render
	}	

Now we can access the data on the state of the compoenent within the render function if we want to output to the screen

	class TodoComponent extends React.Component {
	    constructor(props) {
               super(props);
          
                this.state = {
			todos: ['wash up','eat some cheese','take a nap']			
		};
   	   }
	   render() {
		//return a code

		return(
			<div id="todo-list">
				<p>The busiest people have the most leisure...</p>
				<ul>
					<li>{this.state.todos[0]}</li>
					<li>{this.state.todos[1]}</li>
					<li>{this.state.todos[2]}</li>
				</ul>
			</div>
		);
            }//render
	}	

	So we can initialize our state by using this method and got some data on that state which we were then accessed using this .state and then object and then the different number in that array.

When i use the state or props is upto us. We also pass componenet inside the other compoenent and also pass child compoenent some data.


10.  We now see how to change the state of a component  and also a little bit about virtual dom.	
		
	We does not do to change the data in react by this.state.todos[0]="" we can change data by using a method called set state.

	So to change the data we use the settimeout statement

	render() {
		var ager = setTimeout(function() {
			this.setState({
				//we pass property from the  state we want to change we don't have to pass them all in just the one we want to change
				age:35
			})
		}, 5000)
	}

	after 5s when setTimeout function is called. so setState it changes it to 35


	class TodoComponent extends React.Component {
	    constructor(props) {
               super(props);
          
                this.state = {
			todos: ['wash up','eat some cheese','take a nap'],
			age:30			
		};
   	   }
	   render() {
		//return a code
		var ager = setTimeout(function() {
			this.setState({
				age:35
			});
		},5000);
		return(
			<div id="todo-list">
				<p>The busiest people have the most leisure...</p>
				<ul>
					<li>{this.state.todos[0]}</li>
					<li>{this.state.todos[1]}</li>
					<li>{this.state.todos[2]}</li>
				</ul>
			</div>
		);
            }//render
	}	

	So now this.setState is not woring because this in this.setState is not referring to component because we are within set timeout function so what we need to do is bind the value of this to this function so it carries it inside the function with it 

		//this
		var ager = setTimeout(function() {
			this.setState({
				age:35
			});
		}.bind(this),5000);	
	
	So we binding value of this at inside the setimeout function we are carry within.



11. React uses the Virtual Dom to create this change to update the data in browser. When we  update the virtual dom it is much quicker so thats what react does is we make change in the age that react creates a virtual dom with the new value  and then takes the virtual dom and it compares with actual dom and it looks where is those changes are and where is changes are it updates only that portion so we do not re render the whole dom we are just changing the sections which have been changed in the virtual dom. So that is why react is so quick because we are using th virtual dom  that is much better than working with the Dom directly.



12. In this we see how to quick way  to cycle through data. So we does not know how many differnet items are in a particular array or something like that we donot want to output data we donot want to hardcoded in because there might be five items or seven items and we won't know how many to code so we need to  and eleagant way to cycling thorugh the data


	So we can do that inside the render function so to do this  we need the javascript map function.  so the map function does it takes the array and change it in somewhere and then outputs it to a new array.



	render() {	
		// so we are making a local version of this data so we want to manipulate we does not want to change the data
		var todos = this.state.todos;
		todos = todos.map(function(item,index) {
		//so each time we cycle in it we want doing something with this
			return(
				<li>{item}</li>
			);			
		});
		return(
				<li>{todos}</li>
			);
		});

	}


13. We can now nest component within other component

	So we are nest component inside the todocomponent. So we nest todo item compoenent.


	todos = todos.map(function(item, index){
            return(
                //so we output separate component 
		//so couple of things we can do with this compoenent we pass the data so we want to pass actual todo list item each time so that we can do something with that component. so we pass item as prop. SO next we need to give the key property so this is react specific because when we map out this array  we are going to output this nested component not just once but several times once for each item in array. So we can give the key which react got an identifier on that compoenent

		<TodoItem item={item} key={index}/>
            );
        });



//Crete todoItem component 

	class TodoItem extends React.Component {
		render() {
			return(
				<li>
					
	//When we given a class in jsx we  cannot just say class="" because class is reserved keywords in javascript we have to say className=""
					<div className="todo-item">
						<span className="item-name">{this.props.item}</span>
					</div>

				</li>
			);
		}
	
	}


14. Now we can see how to handle events. So we are going to add intereactivtiy by using react. SO we have differnet kind of events we  can react to with react and if  we want to full list we can see the 

	https://www.facebook.github.io/react/docs/events.html
	
	class TodoComponent extends React.Component {
		render() {
			return( 
			  <div id="todo-list">
	    				<p onClick={this.clicked}>The busiest people have the most leisure...</p>	
			  </div>
			)	
		}, //render
		//Custom Function
		clicked() {
			console.log("you clicked me");
		}
	}

	this.clicked - this is reference to the compoenent and clicked is function name which stored in it.

	If we create function in same component then we have to callonly that componenet.

	Always remember 
	
	 // This binding is necessary to make `this` work in the callback
	    this.handleClick = this.handleClick.bind(this);


15. Modularizing our code to split up into separate modules so that we can keep of it better.
	So we give each component its own module.

	We have now components todo compoenent and todoitems component
	So parent component stays in index.js because that is root compoennet

	So  we create new file todoitem.js where we put todoitems compoenent code.

	So this is not know work so we need to require todoitem.js into index.js

	//Modules requires index.js

	var TodoItem = require('./todoItem');
	
	WE also need to export module

	module.exports = TodoItem

	We need to declare react var on top


16. SO we are now seeing how to insert css in. Instead of loading a huge file we are just require or import only compoent specific css styles.
	WE are importing css in javascript files. We can import this css because in webpack.config.js we use css in loaders.

	require('./css/todoItem.css');	// in todoItem.js

	require('./css/index.css');	// in index.js

	This does not work yet because we does not install CSS loaders

	npm install style-loader css-loader --save-dev

17. Now We are gettin information from users by input refs.

	so we are now adding the information through forms which forms add teh data to the array by input refs

	We need to da ta back to the index.js 
	So first we need to reach in and grab the data and this is where input refs coming to play.In react simple we give 
	<input type="text" rquired ref="newItem" />

	So we need to prevent the default action of this submit button by usiing event into that function back there. When we had an event when we handle that event in a function we can pass through this variable(e) that's gives the information about the event.

	handleSubmit(e) {
	        e.preventDefault();
        	console.log(this.refs.newItem);
	}

	e.preventDefault() going to stop the normal behaviour of the submit button so it's not going to reload the page.


18. We now see the component Lifecycles
	
LifeCycles Components are happen at a particular point in time during  the life cycle of this component they  don't all just fire at once  react does not do that  they  fire in particular order.

	

    - Mounting LifeCycles Functions	
	These are functions that are occur  when a component is mounted to the DOM

	1. getInitialtate(not Used in React we use constructor(props) {} instead)
		- Set the initial state of the component or is set the data

	2. componentWillMount
		- Any last minute prep before component mounts to the DOM
	
	3. Render
		- returns HTML to add to the DOM. this is only one required method in the component

	4. componentDidMount
		- Fires after component mounts to the DOM
		- Good place to load in external data from a database

	

     - Updating Lifecycles Functions

	 1.  componentWillRecieveProps
		- Called before a component recieves any new props
		- Can compare the current and new props and change state
	
	  2. shouldComponentUpdate
		-Can return false if no update wanted and then does not only other function down below
	
	  3. componentWillUpdate

	  4. render
	
	  5. componentDidUpdate
		-Operate on the DOM or perform network requests


19. In this we see Routing
	In our any projects we may have several pages that we want to show the user. to control  the different routes or components or pages we can use routing in front end in react. We can do this on server as well but most of time we like it do in front end we do that. 

	React  router is not automatically installed with react we have to install that separately for us to use it 

	  npm install react-router --save
	  npm install react-router-dom --save

	React router gives two compoenent to work with the 

	1. router component which keeps the  url in sync with the UI of the application 

	2. route component whihc is going to match out route to the app component


	So we need first to import into this project

	import {browserHistory } from 'react-router';
	import { BrowserRouter, Route } from 'react-router-dom'; or import { BrowserRouter as  Router, Route } from 'react-router-dom'; 
	

	So we are set up my routes is by creating a new react Component so 
	
	In previous compoenents we have return this JSx which like an HTML now we can do similar here  but JSx we are going to return is going to be our Routes

	class App extends React.Component {
		render() {
			return(
				<Router>
					<Route>
					</Route>
				</Router>
			);
		}
	}
		
	
	Inside the Router tags we are going to insert our individual routes If there is more than two routes then we need to wrap inside the element or div.
	Inside these tags we add attributes that how we want to work  for  example how we want each route to render a different  compoenent so if i want to route which matches  the path of just forward slash and also match with the compoenents
that will render and the specific path is specified

	<Router>
		<Route path={'/'} component={TodoComponent}></Route>
	</Router>	

	So now we need to do couple more things to do before this work  
	So first things render the App compoenent because this is just kind a sitting there doing nothing at  all  we have set it but it is not doing anything to our application the only thing that's being rendered to the browser is todo component and we do that at the bottom of the file  in which we do ReactDOM render for todoComponent. So instead of todoComponent we render App COmponent.

	THis is still not fully work because one more thing we need
	
	We go to package.json file and do two things come to build script and specify the  flag

	"build": "webpack -d && webpack-dev-server --content-base src/ --inline --hot --port 1234 --history-api-fallback"

	so when we type in a route its look for on the server for that and if that route cannot be found then it's going to fallback to the index page for the 404 page of your light so it is going to serve up that index file.

	if a webpage does not exist we hit the 404  it is going to return the index file to us then react is going to pick up that route that /about and is render the  about compoenent


	So now one more thing we need to do
	So in index.js we also need import browser history api

	import {browserHistory} from 'react-router';

	browserHistory is used to keep track of the forward and back buttons
	So we use that in Router tag

	 <BrowserRouter history={browserHistory}>
                <div>
                    <Route exact path="/" component={TodoComponent} />
                    <Route path="/about" component={About} />                    
                </div>
            </BrowserRouter>

	OR

	 <Router history={browserHistory}>
                <div>
                    <Route exact path="/" component={TodoComponent} />
                    <Route path="/about" component={About} />                    
                </div>
            </Router>

	If we does not use exact then it will load about page with the home page because / slashes is used on both path which renders both the page.


18. Route Links within application
	
	We can use anchor tag directly such as <a href="/about"></a>. 
	But in this we see trick which is best when you are use hash history then browser history

	So we are importing link 

	import { BrowserRouter, Route,Link } from 'react-router-dom';

	So we are using link tag now to link the different views or different components if you like within application	

	class About extends React.Component {
	    render() {
	        return (
	            <div>
	                <Link to="/">Home</Link>            
	            <h2>All About me</h2>
	            </div>
	        );
	    }
	}